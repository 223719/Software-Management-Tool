# -*- coding: utf-8 -*-
"""Software_project_management_tools.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FVzHT__DEHz1fzwkfjX47hdmaxbGFR8L
"""

import tkinter as tk
from tkinter import ttk, messagebox
from tkinter import Canvas
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

class SoftwareManagementTool:
    def __init__(self, root):
        self.root = root
        self.root.title("Software Management Tool")
        self.root.geometry("1000x700")
        self.root.configure(bg="#e6f7ff")

        # Initialize data storage
        self.projects = []
        self.tasks = []

        # Create notebook for screens
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill=tk.BOTH, expand=True)

        # Create screens
        self.create_dashboard_screen()
        self.create_project_screen()
        self.create_task_screen()
        self.create_settings_screen()

    def create_dashboard_screen(self):
        dashboard_frame = ttk.Frame(self.notebook)
        self.notebook.add(dashboard_frame, text="Dashboard")

        # Welcome Label
        ttk.Label(dashboard_frame, text="Welcome to the Software Management Tool",
                  font=("Helvetica", 16, "bold")).pack(pady=20)

        # Chart Section
        chart_frame = ttk.LabelFrame(dashboard_frame, text="Project Status Overview", padding=(10, 10))
        chart_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        self.chart_canvas = Canvas(chart_frame, width=400, height=300, bg="white")
        self.chart_canvas.pack(fill=tk.BOTH, expand=True)

        ttk.Button(chart_frame, text="Show Chart", command=self.show_chart).pack(pady=10)

    def create_project_screen(self):
        project_frame = ttk.Frame(self.notebook)
        self.notebook.add(project_frame, text="Projects")

        form_frame = ttk.LabelFrame(project_frame, text="Project Details", padding=(10, 10))
        form_frame.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")

        ttk.Label(form_frame, text="Name:").grid(row=0, column=0, sticky="w")
        self.name_var = tk.StringVar()
        ttk.Entry(form_frame, textvariable=self.name_var).grid(row=0, column=1, sticky="ew")

        ttk.Label(form_frame, text="Description:").grid(row=1, column=0, sticky="w")
        self.desc_var = tk.StringVar()
        ttk.Entry(form_frame, textvariable=self.desc_var).grid(row=1, column=1, sticky="ew")

        ttk.Label(form_frame, text="Status:").grid(row=2, column=0, sticky="w")
        self.status_var = tk.StringVar()
        status_choices = ["Planned", "In Progress", "Completed"]
        ttk.Combobox(form_frame, textvariable=self.status_var, values=status_choices).grid(row=2, column=1, sticky="ew")

        button_frame = ttk.Frame(form_frame)
        button_frame.grid(row=3, column=0, columnspan=2, pady=10)

        ttk.Button(button_frame, text="Add", command=self.add_project).grid(row=0, column=0, padx=5)
        ttk.Button(button_frame, text="Update", command=self.update_project).grid(row=0, column=1, padx=5)
        ttk.Button(button_frame, text="Delete", command=self.delete_project).grid(row=0, column=2, padx=5)
        ttk.Button(button_frame, text="Clear", command=self.clear_form).grid(row=0, column=3, padx=5)

        # Table for displaying projects
        self.table = ttk.Treeview(project_frame, columns=("Name", "Description", "Status"), show="headings")
        self.table.heading("Name", text="Name")
        self.table.heading("Description", text="Description")
        self.table.heading("Status", text="Status")
        self.table.grid(row=1, column=0, padx=10, pady=10, sticky="nsew")

        self.table.bind("<<TreeviewSelect>>", self.on_table_select)

        scrollbar = ttk.Scrollbar(project_frame, orient=tk.VERTICAL, command=self.table.yview)
        self.table.configure(yscroll=scrollbar.set)
        scrollbar.grid(row=1, column=1, sticky="ns")

    def create_task_screen(self):
        task_frame = ttk.Frame(self.notebook)
        self.notebook.add(task_frame, text="Tasks")

        form_frame = ttk.LabelFrame(task_frame, text="Task Details", padding=(10, 10))
        form_frame.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")

        ttk.Label(form_frame, text="Task Name:").grid(row=0, column=0, sticky="w")
        self.task_var = tk.StringVar()
        ttk.Entry(form_frame, textvariable=self.task_var).grid(row=0, column=1, sticky="ew")

        ttk.Label(form_frame, text="Status:").grid(row=1, column=0, sticky="w")
        self.task_status_var = tk.StringVar()
        task_status_choices = ["To Do", "In Progress", "Done"]
        ttk.Combobox(form_frame, textvariable=self.task_status_var, values=task_status_choices).grid(row=1, column=1, sticky="ew")

        ttk.Button(form_frame, text="Add Task", command=self.add_task).grid(row=2, column=0, padx=5, pady=5)
        ttk.Button(form_frame, text="Clear Tasks", command=self.clear_tasks).grid(row=2, column=1, padx=5, pady=5)

        self.task_listbox = tk.Listbox(task_frame)
        self.task_listbox.grid(row=1, column=0, columnspan=2, sticky="nsew")

    def create_settings_screen(self):
        settings_frame = ttk.Frame(self.notebook)
        self.notebook.add(settings_frame, text="Settings")

        ttk.Label(settings_frame, text="Settings", font=("Helvetica", 16, "bold")).pack(pady=20)

        ttk.Label(settings_frame, text="Customize appearance and behavior.").pack(pady=10)
        ttk.Button(settings_frame, text="Save Settings", command=self.save_settings).pack(pady=10)

    def add_project(self):
        name = self.name_var.get().strip()
        desc = self.desc_var.get().strip()
        status = self.status_var.get().strip()

        if not name or not status:
            messagebox.showerror("Error", "Name and Status are required.")
            return

        self.projects.append({"name": name, "description": desc, "status": status})
        self.refresh_table()
        self.clear_form()

    def update_project(self):
        selected_item = self.table.selection()
        if not selected_item:
            messagebox.showerror("Error", "No project selected.")
            return

        index = self.table.index(selected_item[0])
        self.projects[index] = {
            "name": self.name_var.get().strip(),
            "description": self.desc_var.get().strip(),
            "status": self.status_var.get().strip()
        }
        self.refresh_table()
        self.clear_form()

    def delete_project(self):
        selected_item = self.table.selection()
        if not selected_item:
            messagebox.showerror("Error", "No project selected.")
            return

        index = self.table.index(selected_item[0])
        del self.projects[index]
        self.refresh_table()
        self.clear_form()

    def refresh_table(self):
        for row in self.table.get_children():
            self.table.delete(row)

        for project in self.projects:
            self.table.insert("", tk.END, values=(project["name"], project["description"], project["status"]))

    def on_table_select(self, event):
        selected_item = self.table.selection()
        if selected_item:
            index = self.table.index(selected_item[0])
            project = self.projects[index]

            self.name_var.set(project["name"])
            self.desc_var.set(project["description"])
            self.status_var.set(project["status"])

    def clear_form(self):
        self.name_var.set("")
        self.desc_var.set("")
        self.status_var.set("")

    def show_chart(self):
        status_counts = {"Planned": 0, "In Progress": 0, "Completed": 0}
        for project in self.projects:
            status_counts[project["status"]] += 1

        labels = list(status_counts.keys())
        sizes = list(status_counts.values())

        fig, ax = plt.subplots()
        ax.pie(sizes, labels=labels, autopct="%1.1f%%", startangle=90, colors=["#ff9999", "#66b3ff", "#99ff99"])
        ax.axis('equal')

        canvas = FigureCanvasTkAgg(fig, master=self.chart_canvas)
        canvas.draw()
        canvas.get_tk_widget().pack()

    def add_task(self):
        task_name = self.task_var.get().strip()
        task_status = self.task_status_var.get().strip()

        if not task_name or not task_status:
            messagebox.showerror("Error", "Task Name and Status are required.")
            return

        self.task_listbox.insert(tk.END, f"{task_name} - {task_status}")
        self.task_var.set("")
        self.task_status_var.set("")

    def clear_tasks(self):
        self.task_listbox.delete(0, tk.END)

    def save_settings(self):
        messagebox.showinfo("Settings", "Settings have been saved successfully.")

if __name__ == "__main__":
    root = tk.Tk()
    app = SoftwareManagementTool(root)
    root.mainloop()

